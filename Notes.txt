why next js renders pages again after hydration?

-->

https://github.com/vercel/next.js/issues/12010

Hi, this is the expected behavior for automatically statically optimized dynamic pages.

When a dynamic page does not leverage getServerSideProps, getStaticProps, or getInitialProps 
it is auto prerendered at build time and since the dynamic page's values can't be known during 
this stage the initial HTML doesn't isn't rendered with them so during the first render on the 
client we can't provide these values either to make sure to match the initial HTML and not break hydration.

After hydration has occurred we parse the values from the URL on the client and trigger another render 
to allow the parsed values to be used now that hydration has occurred.



getStaticPaths fallback: false

1. The paths returned from getStaticPaths will be rendered to HTML at build time by
getStaticProps.

2. If fallback is set to false, then any paths not returned by getStaticPaths will result in a 404
page


getStaticPaths fallback: true

1. The paths returned from getStaticPaths will be rendered to HTML at build time by
getStaticProps.

2. The paths that have not been generated at build time will not result in a 404 page. Instead,
Next.js will serve a “fallback” version of the page on the first request to such a path.

3. In the background, Next.js will statically generate the requested path HTML and JSON. This
includes running getStaticProps.

4. When that’s done, the browser receives the JSON for the generated path. This will be used to
automatically render the page with the required props. From the user’s perspective, the page
will be swapped from the fallback page to the full page.

5. At the same time, Next.js keeps track of the new list of pre-rendered pages. Subsequent
requests to the same path will serve the generated page, just like other pages pre-rendered at
build time.


getStaticPaths fallback: ‘blocking'


1. The paths returned from getStaticPaths will be rendered to HTML at build time by
getStaticProps.

2. The paths that have not been generated at build time will not result in a 404 page. Instead, on
the first request, Next.js will render the page on the server and return the generated HTML.

3. When that’s done, the browser receives the HTML for the generated path. From the user’s
perspective, it will transition from "the browser is requesting the page" to "the full page is
loaded". There is no flash of loading/fallback state.

4.. At the same time, Next.js keeps track of the new list of pre-rendered pages. Subsequent
requests to the same path will serve the generated page, just like other pages pre-rendered at
build time.